////////////////////////////////////////////////////////////////////////////////
//
// MonteCarlo (Generic)
//
// Desc: math_MonteCarloParallel.cpp
// Parallel implementation of the Monte Carlo method.
//
// 14/10/2024 (BGM)
// File inception.
//
////////////////////////////////////////////////////////////////////////////////

#include "../include/math_MonteCarloParallel.h"
#include <omp.h>

////////////////////////////////////////////////////////////////////////////////
// Macros:
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Types:
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Prototypes:
////////////////////////////////////////////////////////////////////////////////

double runParallelMonteCarloPICalculation(int n);

////////////////////////////////////////////////////////////////////////////////
// Globals:
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Procedures:
////////////////////////////////////////////////////////////////////////////////

double runParallelMonteCarloPICalculation(int n) {
    int count = 0;

    // Usamos reducción para evitar contención en el acumulador
    #pragma omp parallel reduction(+:count)
    {
        // Generador de números aleatorios por hilo
        std::default_random_engine generator(omp_get_thread_num() + std::random_device{}());
        std::uniform_real_distribution<double> distribution(0.0, 1.0);

        int localCount = 0;

        // División de trabajo con omp for
        #pragma omp for
        for (int i = 0; i < n; ++i) {
            double x = distribution(generator);
            double y = distribution(generator);

            if (x * x + y * y <= 1.0) {
                localCount++;
            }
        }

        // El valor de localCount se suma a count automáticamente gracias a la reducción
        count += localCount;
    }

    return CIRCLE_MULTIPLIER * count / n;
}

