////////////////////////////////////////////////////////////////////////////////
//
// Main (Generic)
//
// Desc: Main.cpp
// Main program.
//
// 14/10/2024 (BGM)
// File inception.
//
////////////////////////////////////////////////////////////////////////////////

#include "../include/Main.h"
#include "../include/math_MonteCarloSequential.h"
#include "../include/math_MonteCarloParallel.h"

////////////////////////////////////////////////////////////////////////////////
// Macros:
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Types:
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Prototypes:
////////////////////////////////////////////////////////////////////////////////

int main(void);

////////////////////////////////////////////////////////////////////////////////
// Globals:
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Procedures:
////////////////////////////////////////////////////////////////////////////////

int main() {

    // Time measurement for Sequential Monte Carlo PI Calculation

    auto startSeq = std::chrono::high_resolution_clock::now();
    double piSequential = runSequentialMonteCarloPICalculation(N);
    auto endSeq = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double> elapsedSeq = endSeq - startSeq;

    std::cout << "Monte Carlo Secuencial: " << piSequential << std::endl;
    std::cout << "Tiempo de Ejecución: " << elapsedSeq.count() << " segundos" << std::endl;

    std::cout << "---" << std::endl;


    // Time measurement for Parallel Monte Carlo PI Calculation

    auto startPar = std::chrono::high_resolution_clock::now();
    double piParallel = runParallelMonteCarloPICalculation(N);
    auto endPar = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double> elapsedPar = endPar - startPar;

    std::cout << "Monte Carlo Paralelizado: " << piParallel << std::endl;
    std::cout << "Tiempo de Ejecución: " << elapsedPar.count() << " segundos" << std::endl;

    return 0;
}
